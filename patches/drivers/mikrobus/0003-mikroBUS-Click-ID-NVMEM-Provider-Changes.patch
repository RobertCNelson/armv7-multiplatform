From 186705f90e804717b62262461aa1a19ee082b500 Mon Sep 17 00:00:00 2001
From: Vaishnav M A <vaishnav@beagleboard.org>
Date: Mon, 30 Nov 2020 23:42:30 +0530
Subject: [PATCH] mikroBUS Click ID NVMEM Provider Changes

Signed-off-by: Vaishnav M A <vaishnav@beagleboard.org>
---
 drivers/misc/mikrobus/mikrobus_id.c | 201 +++++++---------------------
 1 file changed, 49 insertions(+), 152 deletions(-)

diff --git a/drivers/misc/mikrobus/mikrobus_id.c b/drivers/misc/mikrobus/mikrobus_id.c
index b7625a5c968e..f0a01b7d30c7 100644
--- a/drivers/misc/mikrobus/mikrobus_id.c
+++ b/drivers/misc/mikrobus/mikrobus_id.c
@@ -12,42 +12,33 @@
 #include <linux/delay.h>
 
 #include <linux/w1.h>
+#include <linux/nvmem-provider.h>
 
 #define W1_EEPROM_MIKROBUS_ID	0xAC
 
-#define W1_FAC_EEPROM_SIZE		512
-#define W1_FAC_SCRATCH_SIZE		32
+#define W1_MIKROBUS_ID_EEPROM_SIZE	512
+#define W1_MIKROBUS_ID_READ_EEPROM	0xF0
+#define W1_MIKROBUS_ID_EEPROM_READ_RETRIES	10
 
-#define W1_FAC_READ_EEPROM		0xF0
-#define W1_FAC_WRITE_SCRATCH	0x0F
-#define W1_FAC_READ_SCRATCH		0xAA
-#define W1_FAC_COPY_SCRATCH		0x55
-#define W1_FAC_COPY_SCRATCH_ES	0x40
-
-#define W1_FAC_TPROG_MS		15
-
-#define W1_FAC_READ_RETRIES		10
-#define W1_FAC_READ_MAXLEN		512
-
-static int w1_fac_readblock(struct w1_slave *sl, int off, int count, char *buf)
+static int w1_mikrobus_id_readblock(struct w1_slave *sl, int off, int count, char *buf)
 {
-	u8 wrbuf[1];
-	u8 cmp[W1_FAC_READ_MAXLEN];
-	int tries = W1_FAC_READ_RETRIES;
+	u8 wrbuf[3];
+	u8 cmp[W1_MIKROBUS_ID_EEPROM_SIZE];
+	int tries = W1_MIKROBUS_ID_EEPROM_READ_RETRIES;
 
 	do {
-		wrbuf[0] = W1_FAC_READ_EEPROM;
+		wrbuf[0] = W1_MIKROBUS_ID_READ_EEPROM;
+		wrbuf[1] = (count & 0x100) >> 8;
+		wrbuf[1] = count & 0xFF;
 
 		if (w1_reset_select_slave(sl))
-			return -1;
-
-		w1_write_block(sl->master, wrbuf, 1);
+			return -ENODEV;
+		w1_write_block(sl->master, wrbuf, 3);
 		w1_read_block(sl->master, buf, count);
 
 		if (w1_reset_select_slave(sl))
-			return -1;
-
-		w1_write_block(sl->master, wrbuf, 1);
+			return -ENODEV;
+		w1_write_block(sl->master, wrbuf, 3);
 		w1_read_block(sl->master, cmp, count);
 
 		if (!memcmp(cmp, buf, count))
@@ -55,150 +46,56 @@ static int w1_fac_readblock(struct w1_slave *sl, int off, int count, char *buf)
 	} while (--tries);
 
 	dev_err(&sl->dev, "proof reading failed %d times\n",
-			W1_FAC_READ_RETRIES);
-
-	return -1;
+			W1_MIKROBUS_ID_EEPROM_READ_RETRIES);
+	return -EIO;
 }
 
-static ssize_t eeprom_read(struct file *filp, struct kobject *kobj,
-			   struct bin_attribute *bin_attr, char *buf,
-			   loff_t off, size_t count)
+static int w1_mikrobus_id_nvmem_read(void *priv, unsigned int off, void *buf, size_t count)
 {
-	struct w1_slave *sl = kobj_to_w1_slave(kobj);
-	
-	if(count > W1_FAC_READ_MAXLEN)
+	struct w1_slave *sl = priv;
+	int ret;
+
+	if (off > W1_MIKROBUS_ID_EEPROM_SIZE)
 		return -EINVAL;
 
+	if ((off + count) > W1_MIKROBUS_ID_EEPROM_SIZE)
+		count = W1_MIKROBUS_ID_EEPROM_SIZE - off;
+
 	mutex_lock(&sl->master->bus_mutex);
-	if (w1_fac_readblock(sl, off, count, buf) < 0)
-		count = -EIO;
+	ret = w1_mikrobus_id_readblock(sl, off, count, buf);
 	mutex_unlock(&sl->master->bus_mutex);
-
-	return count;
-}
-
-static int w1_fac_writescratchpad(struct w1_slave *sl, int addr, char *buf)
-{
-	u8 wrbuf[3];
-
-	wrbuf[0] = W1_FAC_WRITE_SCRATCH;
-	wrbuf[1] = addr >> 8;
-	wrbuf[2] = addr & 0xFF;
-
-	if (w1_reset_select_slave(sl))
-		return -1;
-
-	w1_write_block(sl->master, wrbuf, 3);
-	w1_write_block(sl->master, buf, W1_FAC_SCRATCH_SIZE);
-
-	return W1_FAC_SCRATCH_SIZE;
-}
-
-static int w1_fac_verifyscratchpad(struct w1_slave *sl, char *buf)
-{
-	u8 wrbuf[1];
-	u8 cmp[W1_FAC_SCRATCH_SIZE + 2];
-
-	wrbuf[0] = W1_FAC_READ_SCRATCH;
-
-	if (w1_reset_select_slave(sl))
-		return -1;
-
-	w1_write_block(sl->master, wrbuf, 1);
-	w1_read_block(sl->master, cmp, W1_FAC_SCRATCH_SIZE);
-
-	if (!memcmp(cmp + 2, buf, W1_FAC_SCRATCH_SIZE))
-		return 0;
-
-	return -1;
+	
+	return ret;
 }
 
-static int w1_fac_copyscratchpad(struct w1_slave *sl, int addr)
+static int w1_mikrobus_id_add_slave(struct w1_slave *sl)
 {
-	u8 wrbuf[4];
-
-	wrbuf[0] = W1_FAC_COPY_SCRATCH;
-	wrbuf[1] = addr >> 8;
-	wrbuf[2] = addr & 0xFF;
-	wrbuf[3] = W1_FAC_COPY_SCRATCH_ES;
-
-	if (w1_reset_select_slave(sl))
-		return -1;
-
-	w1_write_block(sl->master, wrbuf, 4);
-
-	/* Sleep for tprog ms to wait for the write to complete */
-	msleep(W1_FAC_TPROG_MS);
-
-	return 0;
+	struct nvmem_device *nvmem;
+	struct nvmem_config nvmem_cfg = {
+		.dev = &sl->dev,
+		.name = sl->master->bus_master->dev_id,
+		.reg_read = w1_mikrobus_id_nvmem_read,
+		.type = NVMEM_TYPE_OTP,
+		.read_only = true,
+		.word_size = 1,
+		.size = W1_MIKROBUS_ID_EEPROM_SIZE,
+		.priv = sl,
+		.id = -1
+	};
+
+	nvmem = devm_nvmem_register(&sl->dev, &nvmem_cfg);
+	return PTR_ERR_OR_ZERO(nvmem);
 }
 
-static ssize_t eeprom_write(struct file *filp, struct kobject *kobj,
-			    struct bin_attribute *bin_attr, char *buf,
-			    loff_t off, size_t count)
-{
-	struct w1_slave *sl = kobj_to_w1_slave(kobj);
-	u8 wrbuf[W1_FAC_EEPROM_SIZE];
-	int addr, len;
-
-	if(count > W1_FAC_EEPROM_SIZE)
-		return -EINVAL;
-
-	memcpy(wrbuf, buf, count);
-	mutex_lock(&sl->master->bus_mutex);
-
-	/* Can only write data in blocks of the size of the scratchpad */
-	addr = 0;
-	len = 512;
-	while (len > 0) {
-		if (w1_fac_writescratchpad(sl, addr, wrbuf) < 0) {
-			count = -EIO;
-			goto out_up;
-		}
-		if (w1_fac_verifyscratchpad(sl, wrbuf) < 0) {
-			// count = -EIO;
-			// goto out_up;
-		}
-		if (w1_fac_copyscratchpad(sl, addr) < 0) {
-			// count = -EIO;
-			// goto out_up;
-		}
-		wrbuf += W1_FAC_SCRATCH_SIZE;
-		addr += W1_FAC_SCRATCH_SIZE;
-		len -= W1_FAC_SCRATCH_SIZE;
-	}
-
-out_up:
-	mutex_unlock(&sl->master->bus_mutex);
-
-	return count;
-}
-
-static BIN_ATTR_RW(eeprom, W1_FAC_EEPROM_SIZE);
-
-static struct bin_attribute *w1_fac_bin_attrs[] = {
-	&bin_attr_eeprom,
-	NULL,
-};
-
-static const struct attribute_group w1_fac_group = {
-	.bin_attrs = w1_fac_bin_attrs,
-};
-
-static const struct attribute_group *w1_fac_groups[] = {
-	&w1_fac_group,
-	NULL,
-};
-
-static const struct w1_family_ops w1_fac_fops = {
-	.groups		= w1_fac_groups,
+static const struct w1_family_ops w1_family_mikrobus_id_fops = {
+	.add_slave		= w1_mikrobus_id_add_slave,
 };
 
-static struct w1_family w1_family_ac = {
+static struct w1_family w1_family_mikrobus_id = {
 	.fid = W1_EEPROM_MIKROBUS_ID,
-	.fops = &w1_fac_fops,
+	.fops = &w1_family_mikrobus_id_fops,
 };
-module_w1_family(w1_family_ac);
+module_w1_family(w1_family_mikrobus_id);
 
 MODULE_AUTHOR("Vaishnav M A <vaishnav@beagleboard.org>");
 MODULE_DESCRIPTION("w1 family ac driver for mikroBUS ID EEPROM");
-- 
2.25.1

