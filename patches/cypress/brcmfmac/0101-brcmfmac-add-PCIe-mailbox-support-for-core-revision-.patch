From 4370e8fea63bec52160c99f2e83de15180f85a62 Mon Sep 17 00:00:00 2001
From: Wright Feng <wright.feng@cypress.com>
Date: Wed, 24 Oct 2018 03:46:25 -0500
Subject: [PATCH 101/137] brcmfmac: add PCIe mailbox support for core revision
 64 or greater

The mailbox interrupt and mask registers have changed since PCIe2 core
rev 64. Add the corresponding support for new Broadcom/Cypress Wi-Fi
chips.

Signed-off-by: Wright Feng <wright.feng@infineon.com>
Signed-off-by: Chung-Hsien Hsu <chung-hsien.hsu@infineon.com>
---
 .../broadcom/brcm80211/brcmfmac/pcie.c        | 112 +++++++++++++-----
 1 file changed, 82 insertions(+), 30 deletions(-)

diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c
index 0f0006919e86..4b95e1a50891 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/pcie.c
@@ -85,6 +85,9 @@ static const struct brcmf_firmware_mapping brcmf_pcie_fwnames[] = {
 	BRCMF_FW_ENTRY(CY_CC_89459_CHIP_ID, 0xFFFFFFFF, 4355),
 };
 
+#define BRCMF_PCIE_REV_GE64(dev)	(brcmf_chip_get_core((dev)->ci, \
+					 BCMA_CORE_PCIE2)->rev >= 64)
+
 #define BRCMF_PCIE_FW_UP_TIMEOUT		5000 /* msec */
 
 #define BRCMF_PCIE_REG_MAP_SIZE			(32 * 1024)
@@ -107,8 +110,10 @@ static const struct brcmf_firmware_mapping brcmf_pcie_fwnames[] = {
 #define BRCMF_PCIE_REG_LINK_STATUS_CTRL		0xBC
 
 #define BRCMF_PCIE_PCIE2REG_INTMASK		0x24
-#define BRCMF_PCIE_PCIE2REG_MAILBOXINT		0x48
-#define BRCMF_PCIE_PCIE2REG_MAILBOXMASK		0x4C
+#define BRCMF_PCIE_PCIE2REG_MAILBOXINT(dev)	(BRCMF_PCIE_REV_GE64(dev) ? \
+						 0xC30 : 0x48)
+#define BRCMF_PCIE_PCIE2REG_MAILBOXMASK(dev)	(BRCMF_PCIE_REV_GE64(dev) ? \
+						 0xC34 : 0x4C)
 #define BRCMF_PCIE_PCIE2REG_CONFIGADDR		0x120
 #define BRCMF_PCIE_PCIE2REG_CONFIGDATA		0x124
 #define BRCMF_PCIE_PCIE2REG_H2D_MAILBOX_0	0x140
@@ -124,23 +129,60 @@ static const struct brcmf_firmware_mapping brcmf_pcie_fwnames[] = {
 
 #define BRCMF_PCIE_MB_INT_FN0_0			0x0100
 #define BRCMF_PCIE_MB_INT_FN0_1			0x0200
-#define	BRCMF_PCIE_MB_INT_D2H0_DB0		0x10000
-#define	BRCMF_PCIE_MB_INT_D2H0_DB1		0x20000
-#define	BRCMF_PCIE_MB_INT_D2H1_DB0		0x40000
-#define	BRCMF_PCIE_MB_INT_D2H1_DB1		0x80000
-#define	BRCMF_PCIE_MB_INT_D2H2_DB0		0x100000
-#define	BRCMF_PCIE_MB_INT_D2H2_DB1		0x200000
-#define	BRCMF_PCIE_MB_INT_D2H3_DB0		0x400000
-#define	BRCMF_PCIE_MB_INT_D2H3_DB1		0x800000
-
-#define BRCMF_PCIE_MB_INT_D2H_DB		(BRCMF_PCIE_MB_INT_D2H0_DB0 | \
-						 BRCMF_PCIE_MB_INT_D2H0_DB1 | \
-						 BRCMF_PCIE_MB_INT_D2H1_DB0 | \
-						 BRCMF_PCIE_MB_INT_D2H1_DB1 | \
-						 BRCMF_PCIE_MB_INT_D2H2_DB0 | \
-						 BRCMF_PCIE_MB_INT_D2H2_DB1 | \
-						 BRCMF_PCIE_MB_INT_D2H3_DB0 | \
-						 BRCMF_PCIE_MB_INT_D2H3_DB1)
+#define BRCMF_PCIE_MB_INT_D2H0_DB0		0x10000
+#define BRCMF_PCIE_MB_INT_D2H0_DB1		0x20000
+#define BRCMF_PCIE_MB_INT_D2H1_DB0		0x40000
+#define BRCMF_PCIE_MB_INT_D2H1_DB1		0x80000
+#define BRCMF_PCIE_MB_INT_D2H2_DB0		0x100000
+#define BRCMF_PCIE_MB_INT_D2H2_DB1		0x200000
+#define BRCMF_PCIE_MB_INT_D2H3_DB0		0x400000
+#define BRCMF_PCIE_MB_INT_D2H3_DB1		0x800000
+#define BRCMF_PCIE_MB_INT_D2H_DB_ALL	(BRCMF_PCIE_MB_INT_D2H0_DB0 | \
+					 BRCMF_PCIE_MB_INT_D2H0_DB1 | \
+					 BRCMF_PCIE_MB_INT_D2H1_DB0 | \
+					 BRCMF_PCIE_MB_INT_D2H1_DB1 | \
+					 BRCMF_PCIE_MB_INT_D2H2_DB0 | \
+					 BRCMF_PCIE_MB_INT_D2H2_DB1 | \
+					 BRCMF_PCIE_MB_INT_D2H3_DB0 | \
+					 BRCMF_PCIE_MB_INT_D2H3_DB1)
+
+#define BRCMF_PCIE_MB_INT_D2H0_DB0_GE64		0x0001
+#define BRCMF_PCIE_MB_INT_D2H0_DB1_GE64		0x0002
+#define BRCMF_PCIE_MB_INT_D2H1_DB0_GE64		0x0004
+#define BRCMF_PCIE_MB_INT_D2H1_DB1_GE64		0x0008
+#define BRCMF_PCIE_MB_INT_D2H2_DB0_GE64		0x0010
+#define BRCMF_PCIE_MB_INT_D2H2_DB1_GE64		0x0020
+#define BRCMF_PCIE_MB_INT_D2H3_DB0_GE64		0x0040
+#define BRCMF_PCIE_MB_INT_D2H3_DB1_GE64		0x0080
+#define BRCMF_PCIE_MB_INT_D2H4_DB0_GE64		0x0100
+#define BRCMF_PCIE_MB_INT_D2H4_DB1_GE64		0x0200
+#define BRCMF_PCIE_MB_INT_D2H5_DB0_GE64		0x0400
+#define BRCMF_PCIE_MB_INT_D2H5_DB1_GE64		0x0800
+#define BRCMF_PCIE_MB_INT_D2H6_DB0_GE64		0x1000
+#define BRCMF_PCIE_MB_INT_D2H6_DB1_GE64		0x2000
+#define BRCMF_PCIE_MB_INT_D2H7_DB0_GE64		0x4000
+#define BRCMF_PCIE_MB_INT_D2H7_DB1_GE64		0x8000
+#define BRCMF_PCIE_MB_INT_D2H_DB_ALL_GE64 \
+					(BRCMF_PCIE_MB_INT_D2H0_DB0_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H0_DB1_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H1_DB0_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H1_DB1_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H2_DB0_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H2_DB1_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H3_DB0_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H3_DB1_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H4_DB0_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H4_DB1_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H5_DB0_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H5_DB1_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H6_DB0_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H6_DB1_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H7_DB0_GE64 | \
+					 BRCMF_PCIE_MB_INT_D2H7_DB1_GE64)
+
+#define BRCMF_PCIE_MB_INT_D2H_DB(dev)	(BRCMF_PCIE_REV_GE64(dev) ? \
+					 BRCMF_PCIE_MB_INT_D2H_DB_ALL_GE64 : \
+					 BRCMF_PCIE_MB_INT_D2H_DB_ALL)
 
 #define BRCMF_PCIE_SHARED_VERSION_6		6
 #define BRCMF_PCIE_SHARED_VERSION_7		7
@@ -1063,14 +1105,16 @@ static void brcmf_pcie_bus_console_read(struct brcmf_pciedev_info *devinfo,
 
 static void brcmf_pcie_intr_disable(struct brcmf_pciedev_info *devinfo)
 {
-	brcmf_pcie_write_reg32(devinfo, BRCMF_PCIE_PCIE2REG_MAILBOXMASK, 0);
+	brcmf_pcie_write_reg32(devinfo,
+			       BRCMF_PCIE_PCIE2REG_MAILBOXMASK(devinfo), 0);
 }
 
 
 static void brcmf_pcie_intr_enable(struct brcmf_pciedev_info *devinfo)
 {
-	brcmf_pcie_write_reg32(devinfo, BRCMF_PCIE_PCIE2REG_MAILBOXMASK,
-			       BRCMF_PCIE_MB_INT_D2H_DB |
+	brcmf_pcie_write_reg32(devinfo,
+			       BRCMF_PCIE_PCIE2REG_MAILBOXMASK(devinfo),
+			       BRCMF_PCIE_MB_INT_D2H_DB(devinfo) |
 			       BRCMF_PCIE_MB_INT_FN0_0 |
 			       BRCMF_PCIE_MB_INT_FN0_1);
 }
@@ -1086,7 +1130,8 @@ static irqreturn_t brcmf_pcie_quick_check_isr(int irq, void *arg)
 {
 	struct brcmf_pciedev_info *devinfo = (struct brcmf_pciedev_info *)arg;
 
-	if (brcmf_pcie_read_reg32(devinfo, BRCMF_PCIE_PCIE2REG_MAILBOXINT)) {
+	if (brcmf_pcie_read_reg32(devinfo,
+				  BRCMF_PCIE_PCIE2REG_MAILBOXINT(devinfo))) {
 		brcmf_pcie_intr_disable(devinfo);
 		brcmf_dbg(PCIE, "Enter\n");
 		return IRQ_WAKE_THREAD;
@@ -1104,10 +1149,12 @@ static irqreturn_t brcmf_pcie_isr_thread(int irq, void *arg)
 	struct brcmf_bus *bus = dev_get_drvdata(&pdev->dev);
 
 	devinfo->in_irq = true;
-	status = brcmf_pcie_read_reg32(devinfo, BRCMF_PCIE_PCIE2REG_MAILBOXINT);
+	status = brcmf_pcie_read_reg32(devinfo,
+				       BRCMF_PCIE_PCIE2REG_MAILBOXINT(devinfo));
 	brcmf_dbg(PCIE, "Enter %x\n", status);
 	if (status) {
-		brcmf_pcie_write_reg32(devinfo, BRCMF_PCIE_PCIE2REG_MAILBOXINT,
+		brcmf_pcie_write_reg32(devinfo,
+				       BRCMF_PCIE_PCIE2REG_MAILBOXINT(devinfo),
 				       status);
 		if (status & (BRCMF_PCIE_MB_INT_FN0_0 |
 			      BRCMF_PCIE_MB_INT_FN0_1))	{
@@ -1115,7 +1162,7 @@ static irqreturn_t brcmf_pcie_isr_thread(int irq, void *arg)
 			brcmf_pcie_handle_mb_data(bus, d2h_mbdata);
 		}
 
-		if (status & BRCMF_PCIE_MB_INT_D2H_DB) {
+		if (status & BRCMF_PCIE_MB_INT_D2H_DB(devinfo)) {
 			if (devinfo->state == BRCMFMAC_PCIE_STATE_UP)
 				brcmf_proto_msgbuf_rx_trigger(
 							&devinfo->pdev->dev);
@@ -1174,8 +1221,11 @@ static void brcmf_pcie_release_irq(struct brcmf_pciedev_info *devinfo)
 	if (devinfo->in_irq)
 		brcmf_err(bus, "Still in IRQ (processing) !!!\n");
 
-	status = brcmf_pcie_read_reg32(devinfo, BRCMF_PCIE_PCIE2REG_MAILBOXINT);
-	brcmf_pcie_write_reg32(devinfo, BRCMF_PCIE_PCIE2REG_MAILBOXINT, status);
+	status = brcmf_pcie_read_reg32(devinfo,
+				       BRCMF_PCIE_PCIE2REG_MAILBOXINT(devinfo));
+	brcmf_pcie_write_reg32(devinfo,
+			       BRCMF_PCIE_PCIE2REG_MAILBOXINT(devinfo),
+			       status);
 
 	devinfo->irq_allocated = false;
 }
@@ -2026,9 +2076,11 @@ static int brcmf_pcie_buscore_reset(void *ctx, struct brcmf_chip *chip)
 	devinfo->ci = chip;
 	brcmf_pcie_reset_device(devinfo);
 
-	val = brcmf_pcie_read_reg32(devinfo, BRCMF_PCIE_PCIE2REG_MAILBOXINT);
+	val = brcmf_pcie_read_reg32(devinfo,
+				    BRCMF_PCIE_PCIE2REG_MAILBOXINT(devinfo));
 	if (val != 0xffffffff)
-		brcmf_pcie_write_reg32(devinfo, BRCMF_PCIE_PCIE2REG_MAILBOXINT,
+		brcmf_pcie_write_reg32(devinfo,
+				       BRCMF_PCIE_PCIE2REG_MAILBOXINT(devinfo),
 				       val);
 
 	return 0;
-- 
2.17.1

