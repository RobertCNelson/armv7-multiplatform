From 8741ac1893ed902a61ab29eebed6945daa36d7a2 Mon Sep 17 00:00:00 2001
From: Ian Lin <ian.lin@infineon.com>
Date: Tue, 10 May 2022 04:53:27 -0500
Subject: [PATCH 123/137] brcmfmac: support signal monitor feature for
 wpa_supplicant bgscan

Add nl80211 operation and notify event for background scan
After connect to target AP, wpa_supplicant will continually
send scan request to driver with an given interval, and
apply the short/long interval according to signal level.

Signed-off-by: Ian Lin <ian.lin@infineon.com>
---
 .../broadcom/brcm80211/brcmfmac/cfg80211.c    | 65 +++++++++++++++++++
 .../broadcom/brcm80211/brcmfmac/cfg80211.h    |  6 ++
 2 files changed, 71 insertions(+)

diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
index 14e3d0744372..2326084965de 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
@@ -3533,6 +3533,41 @@ next_bss_le(struct brcmf_scan_results *list, struct brcmf_bss_info_le *bss)
 					    le32_to_cpu(bss->length));
 }
 
+static s32 brcmf_singal_monitor(struct brcmf_cfg80211_info *cfg,
+					struct brcmf_if *ifp)
+{
+	s32 err = 0, rssi = 0;
+	int i;
+	u8 bssid[ETH_ALEN] = {0};
+	struct brcmf_scan_results *bss_list;
+	struct brcmf_bss_info_le *bi = NULL;
+
+	if(!cfg->cqm_info.enable)
+		return 0;
+
+	err = brcmf_fil_cmd_data_get(ifp, BRCMF_C_GET_BSSID, bssid, ETH_ALEN);
+	bss_list = (struct brcmf_scan_results *)cfg->escan_info.escan_buf;
+
+	/* wpa bgscan feature: wpa will send scan request after associated
+	 * to the target AP, when we get the scan result of this associated
+	 * AP, send the rssi threshold event upward */
+	for (i = 0; i < bss_list->count; i++) {
+		bi = next_bss_le(bss_list, bi);
+		if (err == 0 && memcmp(bi->BSSID, bssid, ETH_ALEN) == 0) {
+			rssi = (s16)le16_to_cpu(bi->RSSI);
+			brcmf_dbg(TRACE, "%s(%pM), rssi: %d, threshold: %d, send event(%s)\n",
+				bi->SSID, bi->BSSID, rssi, cfg->cqm_info.rssi_threshold,
+				rssi > cfg->cqm_info.rssi_threshold ? "HIGH" : "LOW");
+			cfg80211_cqm_rssi_notify(cfg_to_ndev(cfg),
+				(rssi > cfg->cqm_info.rssi_threshold ?
+					NL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH :
+					NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW),
+				rssi, GFP_KERNEL);
+		}
+	}
+	return 0;
+}
+
 static s32 brcmf_inform_bss(struct brcmf_cfg80211_info *cfg)
 {
 	struct brcmf_pub *drvr = cfg->pub;
@@ -3840,6 +3875,7 @@ brcmf_cfg80211_escan_handler(struct brcmf_if *ifp,
 			goto exit;
 		if (cfg->int_escan_map || cfg->scan_request) {
 			brcmf_inform_bss(cfg);
+			brcmf_singal_monitor(cfg, ifp);
 			aborted = status != BRCMF_E_STATUS_SUCCESS;
 			brcmf_notify_escan_complete(cfg, ifp, aborted, false);
 		} else
@@ -6168,6 +6204,32 @@ brcmf_cfg80211_external_auth(struct wiphy *wiphy, struct net_device *dev,
 	return ret;
 }
 
+static int brcmf_cfg80211_set_cqm_rssi_range_config(struct wiphy *wiphy,
+					 struct net_device *dev, s32 rssi_low, s32 rssi_high)
+{
+	struct brcmf_cfg80211_info *cfg = wiphy_to_cfg(wiphy);
+
+	if (rssi_low == 0) {
+		cfg->cqm_info.enable = 0;
+		cfg->cqm_info.rssi_threshold = 0;
+	} else {
+		cfg->cqm_info.enable = 1;
+		/* nl80211 will reset the high/low after we sent the threshold event,
+		 * it seems we need to use rssi_low as the threshold after we sent
+		 * NL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH event, and vice versa.
+		 * so choose a suitable threshold from the given high/low here */
+		cfg->cqm_info.rssi_threshold = rssi_low;
+		if (rssi_low == S32_MIN)
+			cfg->cqm_info.rssi_threshold = rssi_high;
+		if (rssi_high == S32_MAX)
+			cfg->cqm_info.rssi_threshold = rssi_low;
+	}
+
+	brcmf_dbg(TRACE, "enable = %d, rssi_threshold = %d\n",
+		cfg->cqm_info.enable, cfg->cqm_info.rssi_threshold);
+	return 0;
+}
+
 static struct cfg80211_ops brcmf_cfg80211_ops = {
 	.add_virtual_intf = brcmf_cfg80211_add_iface,
 	.del_virtual_intf = brcmf_cfg80211_del_iface,
@@ -6216,6 +6278,7 @@ static struct cfg80211_ops brcmf_cfg80211_ops = {
 	.del_pmk = brcmf_cfg80211_del_pmk,
 	.change_bss = brcmf_cfg80211_change_bss,
 	.external_auth = brcmf_cfg80211_external_auth,
+	.set_cqm_rssi_range_config = brcmf_cfg80211_set_cqm_rssi_range_config,
 };
 
 struct cfg80211_ops *brcmf_cfg80211_get_ops(struct brcmf_mp_device *settings)
@@ -8165,6 +8228,8 @@ static int brcmf_setup_wiphy(struct wiphy *wiphy, struct brcmf_if *ifp)
 	    brcmf_feat_is_enabled(ifp, BRCMF_FEAT_OKC))
 		wiphy_ext_feature_set(wiphy,
 					NL80211_EXT_FEATURE_ROAM_OFFLOAD);
+	wiphy_ext_feature_set(wiphy, NL80211_EXT_FEATURE_CQM_RSSI_LIST);
+
 	wiphy->mgmt_stypes = brcmf_txrx_stypes;
 	wiphy->max_remain_on_channel_duration = 5000;
 	if (brcmf_feat_is_enabled(ifp, BRCMF_FEAT_PNO)) {
diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h
index 4a984f38993b..715bd43bc003 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.h
@@ -297,6 +297,11 @@ struct escan_info {
 		   struct cfg80211_scan_request *request);
 };
 
+struct cqm_rssi_info {
+	bool enable;
+	s32 rssi_threshold;
+};
+
 /**
  * struct brcmf_cfg80211_vif_event - virtual interface event information.
  *
@@ -393,6 +398,7 @@ struct brcmf_cfg80211_info {
 	struct escan_info escan_info;
 	struct timer_list escan_timeout;
 	struct work_struct escan_timeout_work;
+	struct cqm_rssi_info cqm_info;
 	struct list_head vif_list;
 	struct brcmf_cfg80211_vif_event vif_event;
 	struct completion vif_disabled;
-- 
2.17.1

